args:
- default: true
  description: The Emails to process.
  isArray: true
  name: input
comment: Verifies that an email address is valid and only returns the address if it
  is valid.
commonfields:
  id: ExtractEmailV2
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.5.0
    itemVersion: 1.10.21
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.8.39276
enabled: true
engineinfo: {}
mainengineinfo: {}
name: ExtractEmailV2
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('ExtractEmailV2', 'start', __line__())



  import re

  # Negative lookahead - Verify the pattern does not end with the listed file extensions. Separated by |
  COMMON_FILE_EXT = ("zip", "jpg", "jpeg", "csv", "png", "gif", "bmp", "txt", "pdf", "ppt", "pptx", "xls", "xlsx", "doc",
                     "docx", "eml", "msg")


  def extract_email(email_address: str) -> str:
      """
      Extracts a clean email address using group 1 of the regex.
      Args:
          email_address: the inputted email address

      Returns:
          String: A clean email address (might be defanged)

      """
      email_address = email_address.lower()

      email_format = re.compile("[<(\[{\"\'.]*"
                                "(?:(?:\\\\|\^{3})u[a-f\d]{4})?"
                                "([\w.!#$%&'*+/=?^_`{|}~-]{1,64}"
                                "\[?@]?[\w.-]{1,255}\[?\.]?"
                                "[A-Za-z]{2,})", re.IGNORECASE)

      return re.findall(email_format, email_address)[0]


  def check_tld(email_address: str) -> bool:
      """
      Checks the email domain tld, if it's a common file extension it's a file
      Args:
          email_address: the inputted email address

      Returns:
          Boolean: True if it's not a common file extension

      """
      if email_address.split(".")[-1] not in COMMON_FILE_EXT:
          return True
      else:
          return False


  def refang_email(email_address: str) -> str:
      """
      Refangs an email address by removing square brackets surrounding "@" and ".".
      Args:
          email_address: the inputted email address

      Returns:
          String - Fanged email address

      """
      return email_address.replace("[@]", "@").replace("[.]", ".") if check_tld(email_address) else ''


  def main():
      list_results = []

      emails = argToList(demisto.args().get('input'))

      clean_emails = [extract_email(address) for address in emails]

      list_results = [refang_email(email_address) for email_address in clean_emails]

      output = [
          {
              'Type': entryTypes['note'],
              'ContentsFormat': formats['json'],
              'Contents': email_address,
              'EntryContext': {'Email': email_address},
          } for email_address in list_results]

      if output:
          return_results(output)
      else:
          return_results('')


  if __name__ in ('__main__', 'builtin', 'builtins'):
      main()

  register_module_line('ExtractEmailV2', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- indicator-format
type: python
